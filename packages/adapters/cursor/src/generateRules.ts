/**
 * Generate .cursor/rules/01-orchestrator.md
 */
export function generateRules(): string {
  return `# Orchestrator Rules

## Core Principles

1. **Plan First**: Outline 3–7 steps before executing. If longer than 7, group into phases.

2. **Small Diffs**: Each step yields minimal, testable changes. Avoid large commits.

3. **Explicit File Paths**: Always reference files by full path (e.g., \`apps/web/src/components/Button.tsx\`).

4. **Denylist**: Avoid these paths:
   - \`/legacy/**\`
   - \`/secrets/**\`
   - \`/infra/prod/**\`

5. **Verbalized Sampling (VS)**: When enabled (default), propose k=3 candidate prompt designs with probabilities (sum≈1) and rationales. Run acceptance checks on the winner.

6. **Self-Edits**: Persist improvement rules to \`skills/self-edits.json\`. Ingest them on future runs.

7. **Course Correction**: If acceptance checks fail, revise once. If they fail again, stop and summarize.

## Acceptance Checks (CoVe)

Before finalizing, verify:
- **Security**: No hardcoded secrets, SQL injection risks, or XSS vulnerabilities.
- **Correctness**: Logic matches requirements; edge cases handled.
- **Style**: Linter passes; follows repo conventions.
- **Performance**: No obvious bottlenecks; consider Big-O.
- **Testability**: Code is unit-testable; tests exist for new behavior.

## Self-Adapt Loop (SEAL)

After each task:
1. Generate 3–7 Self-Edits (improvement rules).
2. Persist to \`skills/self-edits.json\`.
3. Ingest them on next run to improve prompts.

---
Generated by Prompt Orchestrator (Cursor MVP)
`;
}


